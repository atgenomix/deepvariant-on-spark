#!/usr/bin/env bash

# arguments
#########################################################################################
alignment_parquet=$1
ref_version=$2
alignment_bam=$3

# variables
#########################################################################################
spark=/usr/bin/spark-submit
executor_vcores=2
num_vcores=`curl http://localhost:8088/ws/v1/cluster/metrics | \
            python -c "import sys, json; print json.load(sys.stdin)['clusterMetrics']['totalVirtualCores']"`
num_nodes=`curl http://localhost:8088/ws/v1/cluster/metrics | \
            python -c "import sys, json; print json.load(sys.stdin)['clusterMetrics']['totalNodes']"`

# functions
#########################################################################################
usage() {
  echo "Usage:"
  echo $'\t' "$0 <Alignment Folder> <Reference Version> <Output Folder> "
  echo "Parameters:"
  echo $'\t' "<Alignment Folder>: the output folder of transform_data.sh"
  echo $'\t' "<Reference Version>: [ 19 | 38 ]"
  echo $'\t' "<Output Folder>: the output folder on HDFS"
  echo "Examples: "
  echo $'\t' "$0 output_HG002/alignment.parquet 19 GRCH output_HG002/alignment.bam"
  return
}

print_time () {
  now=$(date +%s)
  diff=$(($now - $1))
  str_diff=`date +%H:%M:%S -ud @${diff}`
  echo ${str_diff}
}

# argument check
#########################################################################################
if [[ $# -ne 3 ]]; then
  echo "[ERROR] Illegal number of parameters (Expected: 3, Actual: $#)"
  usage $0
  exit -1
fi

if [[ ${ref_version} == "38" ]]; then
    partition_array=(
    "-l 000=chr1:0-16810000 -l 001=chr1:16810000-36810000 -l 002=chr1:36810000-56810000 \
  -l 003=chr1:56810000-76810000  -l 004=chr1:76810000-96810000  -l 005=chr1:96810000-122010000 \
  -l 006=chr1:122010000-143160000  -l 007=chr1:143160000-163160000  -l 008=chr1:163160000-183160000 \
  -l 009=chr1:183160000-203160000  -l 010=chr1:203160000-223580000  -l 011=chr1:223580000-248956422 \
  -l 012=chr2:0-20000000 -l 013=chr2:20000000-40000000 -l 014=chr2:40000000-60000000 \
  -l 015=chr2:60000000-80000000 -l 016=chr2:80000000-97460000 -l 017=chr2:97460000-117460000 \
  -l 018=chr2:117460000-137460000 -l 019=chr2:137460000-157460000 -l 020=chr2:157460000-177460000 \
  -l 021=chr2:177460000-197460000  -l 022=chr2:197460000-217460000  -l 023=chr2:217460000-242193529 \
  -l 024=chr3:0-20000000 -l 025=chr3:20000000-40000000 -l 026=chr3:40000000-60000000 \
  -l 027=chr3:60000000-80000000 -l 028=chr3:80000000-93680000 -l 029=chr3:93680000-113680000"

    "-l 030=chr3:113680000-133680000 -l 031=chr3:133680000-153680000 -l 032=chr3:153680000-173680000 \
  -l 033=chr3:173680000-198295559 -l 034=chr4:0-20000000  -l 035=chr4:20000000-31830000 \
  -l 036=chr4:31830000-58900000 -l 037=chr4:58900000-78900000 -l 038=chr4:78900000-98900000 \
  -l 039=chr4:98900000-118900000 -l 040=chr4:118900000-138900000 -l 041=chr4:138900000-158900000 \
  -l 042=chr4:158900000-178900000 -l 043=chr4:178900000-190214555 -l 044=chr5:0-20000000 \
  -l 045=chr5:20000000-40000000 -l 046=chr5:40000000-50080000 -l 047=chr5:50080000-70080000 \
  -l 048=chr5:70080000-90080000 -l 049=chr5:90080000-110080000 -l 050=chr5:110080000-130080000 \
  -l 051=chr5:130080000-150080000 -l 052=chr5:150080000-170080000 -l 053=chr5:170080000-181538259 \
  -l 054=chr6:0-20000000 -l 055=chr6:20000000-40000000 -l 056=chr6:40000000-60210000 \
  -l 057=chr6:60210000-80210000 -l 058=chr6:80210000-95050000 -l 059=chr6:95050000-115050000"

    "-l 060=chr6:115050000-135050000 -l 061=chr6:135050000-155050000 -l 062=chr6:155050000-170805979 \
  -l 063=chr7:0-20000000 -l 064=chr7:20000000-40000000 -l 065=chr7:40000000-62480000 \
  -l 066=chr7:62480000-82480000 -l 067=chr7:82480000-102480000 -l 068=chr7:102480000-122480000 \
  -l 069=chr7:122480000-143680000 -l 070=chr7:143680000-159345973 -l 071=chr8:0-20000000 \
  -l 072=chr8:20000000-45900000 -l 073=chr8:45900000-65900000 -l 074=chr8:65900000-85690000 \
  -l 075=chr8:85690000-105690000 -l 076=chr8:105690000-125690000 -l 077=chr8:125690000-145138636 \
  -l 078=chr9:0-20000000 -l 079=chr9:20000000-40000000 -l 080=chr9:40000000-67950000 \
  -l 081=chr9:67950000-87950000 -l 082=chr9:87950000-107950000 -l 083=chr9:107950000-127950000 \
  -l 084=chr9:127950000-138394717 -l 085=chr10:0-20000000 -l 086=chr10:20000000-47810000 \
  -l 087=chr10:47810000-67810000 -l 088=chr10:67810000-87810000 -l 089=chr10:87810000-107810000"

    "-l 090=chr10:107810000-133797422 -l 091=chr11:0-20000000 -l 092=chr11:20000000-40000000 \
  -l 093=chr11:40000000-50850000 -l 094=chr11:50850000-70850000 -l 095=chr11:70850000-87990000 \
  -l 096=chr11:87990000-107990000 -l 097=chr11:107990000-135086622 -l 098=chr12:0-20000000 \
  -l 099=chr12:20000000-37100000 -l 100=chr12:37100000-57100000 -l 101=chr12:57100000-77100000 \
  -l 102=chr12:77100000-97100000 -l 103=chr12:97100000-117100000 -l 104=chr12:117100000-133275309 \
  -l 105=chr13:0-18150000 -l 106=chr13:18150000-38150000 -l 107=chr13:38150000-58150000 \
  -l 108=chr13:58150000-86230000 -l 109=chr13:86230000-114364328 -l 110=chr14:0-19550000 \
  -l 111=chr14:19550000-39550000 -l 112=chr14:39550000-59550000 -l 113=chr14:59550000-79550000 \
  -l 114=chr14:79550000-107043718 -l 115=chr15:0-23260000 -l 116=chr15:23260000-43260000 \
  -l 117=chr15:43260000-63260000 -l 118=chr15:63260000-84300000 -l 119=chr15:84300000-101991189"

    "-l 120=chr16:0-20000000 -l 121=chr16:20000000-46350000 -l 122=chr16:46350000-66350000 \
  -l 123=chr16:66350000-90338345 -l 124=chr17:0-26910000 -l 125=chr17:26910000-46910000 \
  -l 126=chr17:46910000-66910000 -l 127=chr17:66910000-83257441 -l 128=chr18:0-20000000 \
  -l 129=chr18:20000000-46990000 -l 130=chr18:46990000-66990000 -l 131=chr18:66990000-80373285 \
  -l 132=chr19:0-27220000 -l 133=chr19:27220000-47220000 -l 134=chr19:47220000-58617616 \
  -l 135=chr20:0-20000000 -l 136=chr20:20000000-31140000 -l 137=chr20:31140000-51140000 \
  -l 138=chr20:51140000-64444167 -l 139=chr21:0-20000000 -l 140=chr21:20000000-46709983 \
  -l 141=chr22:0-20000000 -l 142=chr22:20000000-40000000 -l 143=chr22:40000000-50818468 \
  -l 144=chrX:0-20000000 -l 145=chrX:20000000-40000000 -l 146=chrX:40000000-62440000 \
  -l 147=chrX:62440000-82440000 -l 148=chrX:82440000-102440000 -l 149=chrX:102440000-114310000 \
  -l 150=chrX:114310000-134310000 -l 151=chrX:134310000-156040895 -l 152=chrY:0-20000000 \
  -l 153=chrY:20000000-40000000 -l 154=chrY:40000000-57227415"
    )

elif [[ ${ref_version} == "19" ]]; then
    partition_array=(
    "-l 000=chr1:0-13090000 -l 001=chr1:13090000-29900000 -l 002=chr1:29900000-49900000 \
  -l 003=chr1:49900000-69900000 -l 004=chr1:69900000-89900000 -l 005=chr1:89900000-103890000 \
  -l 006=chr1:103890000-123890000 -l 007=chr1:123890000-148500000 -l 008=chr1:148500000-168500000 \
  -l 009=chr1:168500000-188500000 -l 010=chr1:188500000-206000000 -l 011=chr1:206000000-223770000 \
  -l 012=chr1:223770000-235220000 -l 013=chr1:235220000-249250621 -l 014=chr2:0-21175000 \
  -l 015=chr2:21175000-41175000 -l 016=chr2:41175000-61175000 -l 017=chr2:61175000-87690000 \
  -l 018=chr2:87690000-110130000 -l 019=chr2:110130000-130130000 -l 020=chr2:130130000-149720000 \
  -l 021=chr2:149720000-169720000 -l 022=chr2:169720000-189720000 -l 023=chr2:189720000-209720000 \
  -l 024=chr2:209720000-234030000 -l 025=chr2:234030000-243199373 -l 026=chr3:0-20000000 \
  -l 027=chr3:20000000-40000000 -l 028=chr3:40000000-66200000 -l 029=chr3:66200000-93500000"

    "-l 030=chr3:93500000-113500000 -l 031=chr3:113500000-133500000 -l 032=chr3:133500000-153500000 \
  -l 033=chr3:153500000-173500000 -l 034=chr3:173500000-198022430 -l 035=chr4:0-20000000 \
  -l 036=chr4:20000000-40000000 -l 037=chr4:40000000-50010000 -l 038=chr4:50010000-75450000 \
  -l 039=chr4:75450000-95450000 -l 040=chr4:95450000-115450000 -l 041=chr4:115450000-135450000 \
  -l 042=chr4:135450000-155450000 -l 043=chr4:155450000-175450000 -l 044=chr4:175450000-191154276 \
  -l 045=chr5:0-17550000 -l 046=chr5:17550000-46430000 -l 047=chr5:46430000-66430000 \
  -l 048=chr5:66430000-91660000 -l 049=chr5:91660000-111660000 -l 050=chr5:111660000-138810000 \
  -l 051=chr5:138810000-158810000 -l 052=chr5:158810000-180915260 -l 053=chr6:0-20000000 \
  -l 054=chr6:20000000-40000000 -l 055=chr6:40000000-58110000 -l 056=chr6:58110000-78110000 \
  -l 057=chr6:78110000-95710000 -l 058=chr6:95710000-115710000 -l 059=chr6:115710000-135710000"

    "-l 060=chr6:135710000-157580000 -l 061=chr6:157580000-171115067 -l 062=chr7:0-20000000 \
  -l 063=chr7:20000000-40000000 -l 064=chr7:40000000-50400000 -l 065=chr7:50400000-74740000 \
  -l 066=chr7:74740000-100580000 -l 067=chr7:100580000-130180000 -l 068=chr7:130180000-159138663 \
  -l 069=chr8:0-20000000 -l 070=chr8:20000000-43860000 -l 071=chr8:43860000-63860000 \
  -l 072=chr8:63860000-86600000 -l 073=chr8:86600000-106600000 -l 074=chr8:106600000-126600000 \
  -l 075=chr8:126600000-146364022 -l 076=chr9:0-20000000 -l 077=chr9:20000000-40000000 \
  -l 078=chr9:40000000-60000000 -l 079=chr9:60000000-80000000 -l 080=chr9:80000000-92370000 \
  -l 081=chr9:92370000-112370000 -l 082=chr9:112370000-133100000 -l 083=chr9:133100000-141213431 \
  -l 084=chr10:0-18000000 -l 085=chr10:18000000-38000000 -l 086=chr10:38000000-51160000 \
  -l 087=chr10:51160000-71160000 -l 088=chr10:71160000-91160000 -l 089=chr10:91160000-111160000"

    "-l 090=chr10:111160000-125900000 -l 091=chr10:125900000-135534747 -l 092=chr11:0-20000000 \
  -l 093=chr11:20000000-40000000 -l 094=chr11:40000000-50810000 -l 095=chr11:50810000-70810000 \
  -l 096=chr11:70810000-96310000 -l 097=chr11:96310000-116310000 -l 098=chr11:116310000-135006516 \
  -l 099=chr12:0-20000000 -l 100=chr12:20000000-34880000 -l 101=chr12:34880000-54880000 \
  -l 102=chr12:54880000-74880000 -l 103=chr12:74880000-94880000 -l 104=chr12:94880000-109400000 \
  -l 105=chr12:109400000-133851895 -l 106=chr13:0-20000000 -l 107=chr13:20000000-40000000 \
  -l 108=chr13:40000000-60000000 -l 109=chr13:60000000-86790000 -l 110=chr13:86790000-115169878 \
  -l 111=chr14:0-20000000 -l 112=chr14:20000000-40000000 -l 113=chr14:40000000-60000000 \
  -l 114=chr14:60000000-80000000 -l 115=chr14:80000000-107349540 -l 116=chr15:0-29180000 \
  -l 117=chr15:29180000-49180000 -l 118=chr15:49180000-69180000 -l 119=chr15:69180000-82850000"

    "-l 120=chr15:82850000-102531392 -l 121=chr16:0-20000000 -l 122=chr16:20000000-40900000 \
  -l 123=chr16:40900000-60900000 -l 124=chr16:60900000-90354753 -l 125=chr17:0-20000000 \
  -l 126=chr17:20000000-34700000 -l 127=chr17:34700000-62440000 -l 128=chr17:62440000-81195210 \
  -l 129=chr18:0-15440000 -l 130=chr18:15440000-35440000 -l 131=chr18:35440000-52080000 \
  -l 132=chr18:52080000-78077248 -l 133=chr19:0-24660000 -l 134=chr19:24660000-44660000 \
  -l 135=chr19:44660000-59128983 -l 136=chr20:0-26340000 -l 137=chr20:26340000-46340000 \
  -l 138=chr20:46340000-63025520 -l 139=chr21:0-20000000 -l 140=chr21:20000000-48129895 \
  -l 141=chr22:0-20000000 -l 142=chr22:20000000-40000000 -l 143=chr22:40000000-51304566 \
  -l 144=chrX:0-20000000 -l 145=chrX:20000000-37120000 -l 146=chrX:37120000-58610000 \
  -l 147=chrX:58610000-76680000 -l 148=chrX:76680000-96680000 -l 149=chrX:96680000-113540000 \
  -l 150=chrX:113540000-143530000 -l 151=chrX:143530000-155270560 -l 152=chrY:0-20000000 \
  -l 153=chrY:20000000-40000000 -l 154=chrY:40000000-59373566"
    )
fi

T0=$(date +%s)
# Cluster : n1_highmem_16 x 4
# num-executors | executor-cores | executor-memory | containers |  Memory   | vCores  |   Time   |
# ------------- | -------------- | --------------- | ---------- | --------- | ------- | -------- |
#        5      |        2       |         7g      |     30     |   220G    |    55   | 00:19:32 |
#        5      |        2       |        10g      |     30     |   285G    |    55   | 00:18:51 |
#        7      |        2       |         7g      |     33     |   234G    |    61   | 00:18:09*|
#        7      |        2       |        10g      |     33     |   318G    |   61(2) | 00:18:28 |
#        8      |        3       |        15g      |     11     |   112G    |    23   |   -----  |
#       12      |        2       |        10g      |     33     |   318G    |    61   | 00:17:51 |

pids=""

for i in ${!partition_array[@]};
do
  # echo ${i} --- ${partition_array[${i}]}
  ${spark} \
  --master yarn \
  --deploy-mode cluster \
  --class net.vartotal.piper.cli.PiperMain \
  --name SELECT_BAM-${i} \
  --driver-cores 1 \
  --driver-memory 1g \
  --num-executors $(( ${num_vcores} / ${executor_vcores} / 5 )) \
  --executor-cores ${executor_vcores} \
  --executor-memory 7g \
  --conf spark.hadoop.validateOutputSpecs=false \
  --conf spark.hadoop.dfs.replication=1 \
  --conf spark.dynamicAllocation.enabled=false \
  --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \
  --conf spark.kryo.registrator=org.bdgenomics.adam.serialization.ADAMKryoRegistrator \
  --conf spark.executor.extraClassPath=/usr/local/seqslab/PiedPiper/target/PiedPiper.jar \
  /usr/local/seqslab/PiedPiper/target/PiedPiper.jar \
  newPosBinSelector \
      -i ${alignment_parquet} \
      -o ${alignment_bam} \
      -f bam \
      ${partition_array[${i}]} &

  pids+=" $!"
done

for p in ${pids}; do
  if wait ${p}; then
    str_time=$( print_time ${T0} )
    echo "[INFO] select_bam ${p} completed: " ${str_time}
  else
    echo "########################################################################################"
    echo
    echo "[ERROR] select_bam ${p} failed: Please go to Hadoop Cluster Portal for more detail"
    echo
    echo "########################################################################################"
    exit -1
  fi
done
